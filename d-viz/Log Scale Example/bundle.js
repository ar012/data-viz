(function (d3$1) {
  'use strict';

  const dropDownMenu = (selection, props) => {
    const {
      options,
      onOptionClicked,
      selectedOption
    } = props;
    
    let select = selection.selectAll('select').data([null]);
    select = select.enter().append('select')
      .merge(select)
        .on('change', function() {
  		onOptionClicked(this.value);  
    	  });
    
    const option = select.selectAll('option').data(options);
    option.enter().append('option')
      .merge(option)
        .attr('value', d => d)
        .property('selected', d => d === selectedOption)
        .text(d => d);
  };

  const scatterPlot = (selection, props) => {
    const {
      xValue,
      xAxisLabel,
      yValue,
      circleRadius,
      yAxisLabel,
      margin,
      width,
      height,
      data,
      color,
      cValue,
      selectedLegend,
      tipMouseover,
      tipMouseout
    } = props;
      
    const innerWidth = width - margin.left - margin.right -230;
    const innerHeight = height - margin.top - margin.bottom;
    
    const xScale = d3$1.scaleLog()
      .domain(d3$1.extent(data, xValue))
      .range([0, innerWidth]);
    
    const yScale = d3$1.scaleLog()
      .domain(d3$1.extent(data, yValue))
      .range([innerHeight, 0])
      .nice();
    
    const g = selection.selectAll('.container').data([null]);
    const gEnter = g
      .enter().append('g')
        .attr('class', 'container');
    gEnter.merge(g)
        .attr('transform', 
          `translate(${margin.left},${margin.top})`
        );
    
    const AxisTickFormat = number => d3$1.format(".1s")(number)
      .replace('G', 'B');
    
    const xAxis = d3$1.axisBottom(xScale)
      .tickFormat(AxisTickFormat) 
      .tickSize(-innerHeight)
      .tickPadding(15);
    
    const yAxis = d3$1.axisLeft(yScale)
      .tickFormat(AxisTickFormat) 
      .tickSize(-innerWidth)
      .tickPadding(10);
    
    const yAxisG = g.select('.y-axis');  
    const yAxisGEnter = gEnter
      .append('g')
        .attr('class', 'y-axis');
    
    yAxisG
      .merge(yAxisGEnter)
        .call(yAxis)
        .selectAll('.domain').remove();
    
    
    const yAxisLabelText = yAxisGEnter
      .append('text')
        .attr('class', 'axis-label')
        .attr('y', -55)
        .attr('fill', 'black')
        .attr('transform', `rotate(-90)`)
        .attr('text-anchor', 'middle')
      .merge(yAxisG.select('.axis-label'))
        .attr('x', -innerHeight / 2)
        .text(yAxisLabel);
    
    
    const xAxisG = g.select('.x-axis');  
    const xAxisGEnter = gEnter
      .append('g')
        .attr('class', 'x-axis');
    xAxisG
      .merge(xAxisGEnter)
        .attr('transform', `translate(0,${innerHeight})`)
        .call(xAxis)
        .selectAll('.domain').remove();
    
    const xAxisLabelText = xAxisGEnter
      .append('text')
        .attr('class', 'axis-label')
        .attr('y', 75)
        .attr('fill', 'black')
      .merge(xAxisG.select('.axis-label'))
        .attr('x', innerWidth / 2)
        .text(xAxisLabel);
    
    const circles = g.merge(gEnter)
      .selectAll('circle').data(data);
    circles
      .enter().append('circle')
        .attr('cx', innerWidth / 2)
        .attr('cy', innerHeight / 2)
        .attr('r', 0)
    		.attr('opacity', 0.8)
      	.on('mouseover', tipMouseover)
        .on('mouseout', tipMouseout)
      .merge(circles)
      .transition().duration(1000)
      .delay((d, i) => i * 2)
        .attr('cy', d => yScale(yValue(d)))
        .attr('cx', d => xScale(xValue(d)))
        .attr('r', circleRadius)
        .attr('fill', d => color(cValue(d)));
    
    circles
      .merge(circles)
        .attr('opacity', d =>
          (!selectedLegend || selectedLegend === cValue(d))
            ? 0.8
            : 0.05
        )
      	.attr('r', d =>
          (selectedLegend === cValue(d))
            ? 2*circleRadius
            : circleRadius
       	);

  };

  const colorLegend = ( selection, props ) => {
    
    const {
      color,
      width,
      onClick,
      selectedLegend
    } = props;
    
    var legend = selection.selectAll(".legend").data(color.domain());
    var legendEnter = legend
      .enter().append("g")
        .attr("class", "legend");
    
    legendEnter
      .merge(legend)
        .attr("transform", (d, i) => `translate(-40,${(i + 8.5) * 50})`)
        .attr('opacity', d => 
          (!selectedLegend || d === selectedLegend)
            ? 1
            : 0.2
        )
        .on('click', d => onClick(
  				d === selectedLegend
      			? null
      			: d
  			));
        

      
    // draw legend colored rectangles
    legendEnter.append("rect")
        .attr("x", width-160)
        .attr("y", -400)
        .attr("width", 18)
        .attr("height", 18)
        .attr("fill", color);

    // draw legend text
    legendEnter.append("text")
        .attr("x", width-165)
        .attr("y", -370)
        .attr("dy", ".6em")
        .style("text-anchor", "start")
        .text(function(d) { return d;});
    
  };

  const svg = d3$1.select('svg');

  const width = +svg.attr('width');
  const height = +svg.attr('height');
  const margin = { top: 20, right: 35, bottom: 100, left: 52 };

  const color = d3$1.scaleOrdinal(d3$1.schemeCategory10);

  const cValue = data => data['Indicator_desc'];
    

  let data;
  let xColumn;
  let yColumn;
  let selectedLegend;


  const onXColumnClicked = column => {
    xColumn = column;  
    render();
  };

  const onYColumnClicked = column => {
    yColumn = column;  
    render();
  };

  const onClick = d => {
    selectedLegend = d;
  //  console.log({selectedLegend});
    render();
  };

  const scatterG = svg.append('g')
    .attr('transform', `translate(${margin.left},${margin.top})`);

  var tipMouseover = function (d) {
    var html = d['Reporter_desc'] + "<br/>" +
      "<span style='color:" + color(cValue(d)) + ";'>" + d['Indicator_desc'] + "</span><br/>" +
      "<b>" + d[xColumn] + `</b> ${xColumn}, <b/>` + d[yColumn] + `</b> ${yColumn}`;
    d3$1.select('.tooltip').html(html)
      .style("left", (d3.event.pageX + 15) + "px")
      .style("top", (d3.event.pageY - 28) + "px")
      .transition()
      .duration(200) 
      .style("opacity", .9);
    
  };

  // tooltip mouseout event handler
  var tipMouseout = function (d) {
    d3$1.select('.tooltip').transition()
      .duration(300) 
      .style("opacity", 0);
  };


  const render = () => {
    
    d3$1.select('#x-menu')
      .call(dropDownMenu, {
        options: data.columns.filter(column =>
          column !== 'Reporter_desc' &&
          column !== 'Indicator_desc' &&
          column !== 'Year'&&
          column !== yColumn
        ),
        onOptionClicked: onXColumnClicked,
        selectedOption: xColumn
    });
    
    d3$1.select('#y-menu')
      .call(dropDownMenu, {
        options: data.columns.filter(column =>
          column !== 'Reporter_desc' &&
          column !== 'Indicator_desc' &&
          column !== 'Year' &&
          column !== xColumn
        ),
        onOptionClicked: onYColumnClicked,
        selectedOption: yColumn
    });
    
    scatterG.call(scatterPlot, {
      xValue: d => d[xColumn],
      xAxisLabel: xColumn,
      yValue: d => d[yColumn],
      circleRadius: 4,
      yAxisLabel: yColumn,
      margin: margin,
      width,
      height,
      data,
      color,
      cValue,
      selectedLegend,
      tipMouseover,
      tipMouseout
    });
    
    svg.call(colorLegend, {
      color,
      width,
      onClick,
      selectedLegend
    });
    
    d3$1.select('body').append("div")
      .attr("class", "tooltip")
      .style("opacity", 0);

  };

  d3$1.csv('https://vizhub.com/veagy/datasets/2000-2016 Worldwide Exports.csv')
    .then(loadedData => {
      data = loadedData;
      data.forEach(d => {
        d['China'] = +d['China'];
        d['United States of America'] = +d['United States of America'];
        d['Brazil'] = +d['Brazil'];
        d['India'] = +d['India'];
        d['Japan'] = +d['Japan'];
        d['Mexico'] = +d['Mexico'];
        d['Russian Federation'] = +d['Russian Federation'];
      });
      xColumn = data.columns[4];
      yColumn = data.columns[3];
      render();
  });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,